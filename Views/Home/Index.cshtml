
@{
    ViewBag.Title = "Index";
}

<h2>Example to calculate the Acreage - Perimeter of the basic shape</h2>
<div>
    <div class = "col-md-7">
        <p>
            <div>
                The Model-View-Controller (MVC) architectural pattern separates an application into three main
                groups of components: Models, Views, and Controllers. This pattern helps to achieve separation
                of concerns. Using this pattern, user requests are routed to a Controller which is responsible for
                working with the Model to perform user actions and/or retrieve results of queries. The Controller
                chooses the View to display to the user, and provides it with any Model data it requires.
            </div>

            <div class="thisDeliane">
                This delineation of responsibilities helps you scale the application in terms of complexity
                because it's easier to code, debug, and test something (model, view, or controller) that has a
                single job. It's more difficult to update, test, and debug code that has dependencies spread
                across two or more of these three areas. For example, user interface logic tends to change
                more freequently than business logic. If presentation code and business logic are combined in a
                single object, an object contraining business logic must be modified every time the user interface
                is changed. This often introduces errors and requires the retesting of business logic after every
                minimal user interface change.
            </div>
        </p>
    </div>
    <div class = "col-md-5">
        <img class="imgHome" src="~/Assets/Images/colors-and-shapes.png" />
    </div>

</div>
